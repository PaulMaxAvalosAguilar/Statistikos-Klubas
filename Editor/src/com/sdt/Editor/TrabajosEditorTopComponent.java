/*
 * Copyright (C) 2017 Paul Max Avalos Aguilar at S.D.T. pauldromeasaurio@hotmail.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package com.sdt.Editor;



import com.sdt.Datos.Trabajos;
import com.sdt.Editor.FXControllers.MainController;
import java.awt.BorderLayout;
import java.io.IOException;
import java.net.URL;
import java.util.Collection;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.fxml.FXMLLoader;
import javafx.fxml.JavaFXBuilderFactory;
import javafx.scene.Parent;
import javafx.scene.Scene;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;


/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.sdt.EditorManagerImpl//TrabajosEditor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TrabajosEditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.sdt.EditorManagerImpl.TrabajosEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TrabajosEditorAction",
        preferredID = "TrabajosEditorTopComponent"
)
@Messages({
    "CTL_TrabajosEditorAction=Calculator Window",
    "CTL_TrabajosEditorTopComponent=Calculator Window",
    "HINT_TrabajosEditorTopComponent=This is a TrabajosEditor window"
})
public final class TrabajosEditorTopComponent extends TopComponent {

    private static JFXPanel jfxPanel;
    private Lookup.Result<Trabajos> lookupResult = null;
    private MainController controller;
    
    public TrabajosEditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_TrabajosEditorTopComponent());
        setToolTipText(Bundle.HINT_TrabajosEditorTopComponent());
        setLayout(new BorderLayout());
        init();

    }
    
    private void init(){
        jfxPanel = new JFXPanel();
        add(jfxPanel, BorderLayout.CENTER);
        Platform.setImplicitExit(false);
        Platform.runLater(() -> {
        createScene();
        });
    }
    
    private void createScene(){
        try {
            URL location = getClass().getResource("FXML/Main.fxml");
            FXMLLoader fxmlLoader = new FXMLLoader();
            fxmlLoader.setLocation(location);
            fxmlLoader.setBuilderFactory(new JavaFXBuilderFactory());
            
            Parent root = (Parent)fxmlLoader.load(location.openStream());
            Scene scene = new Scene(root);
            jfxPanel.setScene(scene);
            controller = fxmlLoader.getController();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
   
    LookupListener lookupListener = (ev) -> {
        checkLookup();
    };

    
    private void checkLookup(){
        TopComponent tc = TopComponent.getRegistry().getActivated();
        if(tc != null &&tc.equals(this)){
            return;
        }
        Collection<? extends Trabajos> allPeople = lookupResult.allInstances();
        if(Platform.isFxApplicationThread()){
            controller.doUpdate(allPeople);
        }else{
            Platform.runLater(() -> {
                controller.doUpdate(allPeople);
            });
        }
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        lookupResult = Utilities.actionsGlobalContext().lookupResult(Trabajos.class);
        lookupResult.addLookupListener(lookupListener);
        checkLookup();
    }

    @Override
    public void componentClosed() {
        lookupResult.removeLookupListener(lookupListener);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
